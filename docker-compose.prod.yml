# Production 보안 강화 Docker Compose
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - ./nginx/nginx-secure.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - user-service
      - admin-service
      - backend-service
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # Certbot for SSL certificates (manual execution only)
  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    # Remove automatic command - run manually when needed
    # command: certonly --webroot --webroot-path=/var/www/certbot --email jysystem22@gmail.com --agree-tos --no-eff-email -d polradar.com -d www.polradar.com

  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile.prod
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://polradar.com/api
    restart: unless-stopped
    networks:
      - frontend
    #read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true

  admin-service:
    build:
      context: ./admin_service
      dockerfile: Dockerfile.prod
    expose:
      - "3001"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://polradar.com/api
    restart: unless-stopped
    networks:
      - frontend
      - backend
    #read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true

  backend-service:
    build:
      context: ./backend_service
      dockerfile: Dockerfile.prod
    expose:
      - "8080"
      - "8081" # Actuator port
    depends_on:
      - database
      - redis
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/factlab
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-factlab_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
    restart: unless-stopped
    networks:
      - backend
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/factlab
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  crawler-service:
    build:
      context: ./crawler
      dockerfile: Dockerfile.prod
    expose:
      - "3002"
    depends_on:
      - database
      - redis
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=factlab
      - DB_USER=${DB_USERNAME:-factlab_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DATABASE_URL=postgresql://${DB_USERNAME:-factlab_user}:${DB_PASSWORD}@database:5432/factlab
    restart: unless-stopped
    networks:
      - backend
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true

  ai-service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile.prod
    expose:
      - "8001"
    depends_on:
      - database
      - redis
    env_file:
      - .env
    environment:
      - ENVIRONMENT=production
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=factlab
      - DB_USER=${DB_USERNAME:-factlab_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - backend
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true

  # Redis for session store and caching
  redis:
    image: redis:7-alpine
    expose:
      - "6379"
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - backend
    security_opt:
      - no-new-privileges:true

  database:
    image: postgres:15-alpine
    expose:
      - "5432" # 외부 포트 노출 제거
    env_file:
      - .env
    environment:
      - POSTGRES_DB=factlab
      - POSTGRES_USER=${DB_USERNAME:-factlab_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Database backup service
  db-backup:
    image: postgres:15-alpine
    depends_on:
      - database
    env_file:
      - .env
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "
        while true; do
          pg_dump -h database -U ${DB_USERNAME:-factlab_user} -d factlab > /backups/factlab_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    networks:
      - backend
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - monitoring
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  loki_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true # 외부 접근 차단
  monitoring:
    driver: bridge
    internal: true
