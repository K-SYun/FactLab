# FactLab 모듈 분리 구조

## 전체 아키텍처
```
FactLab/
├── docker-compose.yml               # 전체 서비스 오케스트레이션
├── .env                             # 환경 변수 (서비스 공통)
├── nginx/                           # 리버스 프록시 및 정적 라우팅
│   ├── Dockerfile
│   └── nginx.conf
├── database/                        # PostgreSQL 초기화 (init.sql 등)
│   └── init.sql
├── user-service/                   # 사용자 모듈 웹 프론트엔드 (React 기반)
│   ├── Dockerfile
│   ├── package.json
│   ├── public/
│   └── src/
│       ├── pages/
│       ├── components/
│       └── ...
├── admin_service/                  # 관리자 모듈 웹 프론트엔드 (React 기반)
│   ├── Dockerfile
│   ├── package.json
│   ├── public/
│   └── src/
│       ├── pages/
│       ├── components/
│       └── ...
├── backend_service/                # backend 모듈 Java Spring Boot 기반 메인 API 서버
│   ├── Dockerfile
│   ├── build.gradle / pom.xml
│   └── src/main/java/com/factlab/
│       ├── controller/
│       ├── service/
│       ├── repository/
│       ├── entity/
│       ├── dto/
│       └── config/
│   └── src/main/resources/
│       ├── application.yml
│       └── schema.sql (선택)
├── crawler_ai_service/             # 크롤링/AI 분석 모듈 통합 Python 서비스 (FastAPI 기반)
│   ├── Dockerfile
│   ├── requirements.txt
│   └── app/
│       ├── main.py                 # FastAPI 진입점
│       ├── crawlers/
│       │   ├── naver.py
│       │   └── daum.py
│       ├── analyzers/
│       │   └── gpt_classifier.py
│       ├── pipelines/
│       │   └── save_to_db.py
│       ├── schedulers/            # 스케줄링/배치 관리
│   	  │   ├── scheduler.py	   # APScheduler 등 스케줄러 등록
│	      └── jobs/
│   	  │   ├── daily_task.py
│   	  │   └── hourly_task.py		
│       ├── routes/                # FastAPI 라우트
│       │   └── health.py
│       └── db.py
├── shared/                         # 공통 Python 모듈 (Spring과는 별개)
│   ├── config/
│   ├── database/
│   └── utils/
└── docs/                           # API 명세, ERD, 설계 문서 등
```


## 서비스별 역할

### 1. User Service (사용자 서비스)
- **포트**: 3000
- **역할**: 
  - 사용자 화면 제공 (HTML, CSS, JS)
  - 사용자 API (로그인, 회원가입, 게시글, 댓글)
  - 뉴스 조회 API
  - 투표 시스템
  - html 파일: /Users/yun/Projects/FactLab/documents/user_html/
- **기술스택**: Python Flask/FastAPI, Jinja2, PostgreSQL

### 2. Admin Service (관리자 서비스)
- **포트**: 3001
- **역할**:
  - 관리자 화면 제공
  - 뉴스 승인/거부 관리
  - 사용자 관리
  - 통계 대시보드
  - AI 요약 검토 및 수정
  - html파일 : /Users/yun/Projects/FactLab/documents/admin_html/
- **기술스택**: Python Flask/FastAPI, Jinja2, PostgreSQL

### 3. Crawler AI Service (크롤링/AI 서비스)
- **포트**: 3002
- **역할**:
  - 뉴스 크롤링 (네이버, 다음 RSS)
  - 트렌딩 키워드 수집
  - AI 요약 생성 (OpenAI API)
  - 스케줄링/배치 작업
  - 중복 제거 및 분류
- **기술스택**: Python, Scrapy, BeautifulSoup, OpenAI API, Celery

### 4. Database (PostgreSQL)
- **포트**: 5432
- **역할**: 통합 데이터베이스
- **주요 테이블**: news, users, comments, votes, trending_keywords

### 5. Nginx (리버스 프록시)
- **포트**: 80, 443
- **역할**: 
  - 로드 밸런싱
  - SSL 종료
  - 정적 파일 서빙
  - API 라우팅

## 통신 구조
```
[사용자] → [Nginx] → [User Service] → [Database]
[관리자] → [Nginx] → [Admin Service] → [Database]
[Scheduler] → [Crawler Service] → [OpenAI API] → [Database]
```

## 데이터 흐름
1. **크롤링 → 저장**: Crawler Service가 뉴스 수집 후 DB 저장
2. **AI 분석**: Crawler Service가 OpenAI API로 요약 생성
3. **관리자 승인**: Admin Service에서 뉴스 승인/거부
4. **사용자 조회**: User Service에서 승인된 뉴스만 노출

## 개발 순서
1. **Docker 환경 구성**: docker-compose.yml, Dockerfile들
2. **Database 스키마**: PostgreSQL 테이블 설계
3. **Shared 모듈**: 공통 DB 모델, 유틸리티
4. **Crawler Service**: 크롤링 및 AI 분석 (가장 독립적)
5. **Admin Service**: 관리자 화면 및 API
6. **User Service**: 사용자 화면 및 API
7. **Nginx 설정**: 라우팅 및 프록시 설정

## 환경 변수
```
# Database
POSTGRES_HOST=database
POSTGRES_DB=factlab
POSTGRES_USER=factlab_user
POSTGRES_PASSWORD=password

# gemini
gemini_API_KEY=your_gemini_key

# Services
USER_SERVICE_URL=http://user-service:3000
ADMIN_SERVICE_URL=http://admin-service:3001
CRAWLER_AI_SERVICE_URL=http://crlai-service:3002
```

## 구현 계획

### 5.1 관리자 화면 개발 : admin_html 폴더 파일 사용.
- **뉴스 수집 모니터링**: 크롤링 상태 실시간 대시보드
- **AI 분석 결과 관리**: 요약, 질문, 신뢰도 관리 시스템
- **팩트체킹 승인**: 관리자 검토 및 승인 워크플로우

### 5.2 사용자 화면 개발 : user_html 폴더 파일 사용.
- **뉴스 피드**: AI 요약된 뉴스 목록 및 상세 페이지
- **팩트체킹 참여**: 질문 투표 및 토론 시스템
- **신뢰도 시각화**: 뉴스별 신뢰도 점수 및 분석 결과 표시

### 5.3 API 서비스 
- **RESTful API**: 뉴스 분석 결과 제공 엔드포인트
- **실시간 업데이트**: WebSocket 기반 실시간 알림
- **사용자 피드백**: 투표 결과 수집 및 분석 시스템

## 구현 우선순위
1. **Admin Service UI**: 뉴스 관리 대시보드 (다크 테마)
2. **User Service UI**: 기존 HTML 파일 활용한 사용자 화면
3. **API 엔드포인트**: RESTful API 및 WebSocket
4. **통합 테스트**: 전체 서비스 연동 테스트
