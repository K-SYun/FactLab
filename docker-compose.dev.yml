# Development Docker Compose
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
    container_name: factlab-nginx_dev
    depends_on:
      user-service:
        condition: service_healthy
      admin-service:
        condition: service_healthy
      backend-service:
        condition: service_healthy
      crawler-service:
        condition: service_healthy
      ai-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - frontend
      - backend

  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    container_name: factlab-user-service_dev
    volumes:
      - ./user_service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost/api
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - frontend

  admin-service:
    build:
      context: ./admin_service
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    container_name: factlab-admin-service_dev
    volumes:
      - ./admin_service:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost/api
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - frontend
      - backend

  backend-service:
    build:
      context: ./backend_service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
    container_name: factlab-backend-service_dev
    volumes:
      - ./backend_service:/app
    depends_on:
      - database
    env_file:
      - .env.dev
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - LOGGING_LEVEL_SQL=DEBUG
      - SPRING_JPA_SHOW_SQL=true
      - APP_CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

  crawler-service:
    build:
      context: ./crawler
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    container_name: factlab-crawler-service_dev
    volumes:
      - ./crawler:/app
    depends_on:
      - database
    env_file:
      - .env.dev
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

  ai-service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    container_name: factlab-ai-service_dev
    volumes:
      - ./ai_service:/app
    depends_on:
      - database
    env_file:
      - .env.dev
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

  database:
    image: postgres:15-alpine
    ports:
      - "5432:5432"  # 개발 환경에서는 외부 접근 허용
    container_name: factlab-database_dev
    env_file:
      - .env.dev
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/init-dev-data.sql:/docker-entrypoint-initdb.d/init-dev-data.sql:ro
    restart: unless-stopped
    networks:
      - backend


volumes:
  postgres_dev_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge