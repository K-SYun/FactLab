# 개발 환경용 Docker Compose
services:
  nginx:
    container_name: factlab-nginx-dev
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user-service
      - admin-service  
      - backend-service
    networks:
      - frontend
      - backend

  user-service:
    container_name: factlab-user-service-dev
    build: 
      context: ./user_service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost/api
    volumes:
      - ./user_service/src:/app/src  # 개발용 핫 리로드
    networks:
      - frontend
      - backend  # backend-service와 통신하기 위해 추가

  admin-service:
    container_name: factlab-admin-service-dev
    build: 
      context: ./admin_service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost/api
    volumes:
      - ./admin_service/src:/app/src  # 개발용 핫 리로드
    networks:
      - frontend
      - backend  # backend-service와 통신하기 위해 추가

  backend-service:
    container_name: factlab-backend-service-dev
    build: 
      context: ./backend_service
      dockerfile: Dockerfile  # 개발용 Dockerfile
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev  # 개발 프로파일
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/factlab
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME:-factlab_user}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - NAVER_CLIENT_ID=${NAVER_CLIENT_ID}
      - NAVER_CLIENT_SECRET=${NAVER_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
    volumes:
      - ./backend_service/target:/app/target  # 개발용 볼륨
    networks:
      - backend

  crawler-service:
    container_name: factlab-crawler-service-dev
    build: 
      context: ./crawler
      dockerfile: Dockerfile
    ports:
      - "3002:3002"  # 개발 시 외부 접근 허용
    depends_on:
      - database
    environment:
      - ENVIRONMENT=development
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=factlab
      - DB_USER=${DB_USERNAME:-factlab_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE_URL=postgresql://${DB_USERNAME:-factlab_user}:${DB_PASSWORD}@database:5432/factlab
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./crawler:/app  # 개발용 핫 리로드
    networks:
      - backend

  ai-service:
    container_name: factlab-ai-service-dev
    build: 
      context: ./ai_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"  # 개발 시 외부 접근 허용
    depends_on:
      - database
    environment:
      - ENVIRONMENT=development
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=factlab
      - DB_USER=${DB_USERNAME:-factlab_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - ./ai_service:/app  # 개발용 핫 리로드
    networks:
      - backend


  database:
    container_name: factlab-database-dev
    image: postgres:15-alpine
    ports:
      - "5433:5432"  # Backend 설정에 맞춰 5433으로 매핑
    environment:
      - POSTGRES_DB=factlab
      - POSTGRES_USER=${DB_USERNAME:-factlab_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-factlab_user} -d factlab"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_dev:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge