events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Docker DNS resolver
    resolver 127.0.0.11 valid=30s;
    
    # Basic MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Server information hiding
    server_tokens off;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=200r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Enhanced logging format
    log_format main '$remote_addr - $remote_user [$time_local] ' 
                   '"$request" $status $bytes_sent ' 
                   '"$http_referer" "$http_user_agent" ' 
                   '$request_time $upstream_response_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Upstream servers with connection pooling
    upstream user-service {
        server user-service:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream admin-service {
        server admin-service:80 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream backend-service {
        server backend-service:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream crawler-service {
        server crawler-service:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream ai-service {
        server ai-service:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP -> HTTPS 리다이렉트
    server {
        listen 80;
        server_name polradar.com www.polradar.com;

        # Let's Encrypt challenge location (먼저 처리)
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            root         /var/www/certbot;
        }

        # 모든 다른 요청은 HTTPS로 리다이렉트
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name polradar.com www.polradar.com;

        # SSL 인증서 설정
        ssl_certificate /etc/letsencrypt/live/polradar.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/polradar.com/privkey.pem;

        # SSL 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

        # Custom error pages
        error_page 404 /404.html;
        error_page 503 /503.html;

        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /503.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Favicon handling
        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 204;
        }

        # ads.txt for Google AdSense
        location = /ads.txt {
            proxy_pass http://user-service/ads.txt;
            proxy_set_header Host $host;
            add_header Content-Type text/plain;
            access_log off;
        }

        # User Service (React SPA) - Root path
        location / {
            proxy_pass http://user-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Admin Service (React SPA) - /admin path
        location = /admin {
            return 301 /admin/;
        }

        location /admin/ {
            proxy_pass http://admin-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # AI Service - 내부 접근만 허용
        location ^~ /ai/ {
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker internal networks
            deny all;

            proxy_pass http://ai-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 120s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
        }

        # AI Proxy for frontend requests
        location /api/ai-proxy/ {
            proxy_pass http://ai-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 120s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
        }

        # Admin API 전용 프록시 (더 구체적인 패턴)
        location ~ ^/api/admin/(.*)$ {
            limit_req zone=api burst=20 nodelay;
            limit_conn conn_limit_per_ip 20;

            proxy_pass http://backend-service/api/admin/$1$is_args$args;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 120s;
        }

        # API 프록시 (Rate limiting 적용)
        location /api/ {
            # Apply rate limiting to API endpoints
            limit_req zone=api burst=100 nodelay;
            limit_conn conn_limit_per_ip 50;

            proxy_pass http://backend-service/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Admin auth endpoints - 더 엄격한 제한 (더 구체적인 패턴이 우선)
        location ~ ^/api/admin/auth/(.*)$ {
            limit_req zone=login burst=5 nodelay;
            limit_conn conn_limit_per_ip 20;

            proxy_pass http://backend-service/api/admin/auth/$1$is_args$args;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # 별도 location으로 auth/login 제한 - admin auth 제외
        location ~ ^/api/(auth|login)(?!/admin) {
            limit_req zone=login burst=3 nodelay;
            limit_conn conn_limit_per_ip 20;

            proxy_pass http://backend-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Crawler Service - 관리자 접근 허용
        location /crawler/ {
            proxy_pass http://crawler-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 120s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 60s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Let's Encrypt challenge location
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            root         /var/www/certbot;
        }

    }}
